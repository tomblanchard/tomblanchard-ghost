/*============================================================================
  #Variables
==============================================================================*/

$color-default: #333;
$color-accent: #8BC34A;
$color-placeholder: #C7C7CD;

$colors: (default ,$color-default)
         (accent, $color-accent)
         (placeholder, $color-placeholder);

$font-size: text-scale(0);
$font-stack: "Space Mono", monospace;
$font-stack-headline: "Roboto Slab", serif;

$xsmall: 320px;
$small: 480px;
$medium: 768px;
$large: 1024px;

$breakpoints: (
  "small" "(max-width: #{$small})",
  "medium" "(min-width: #{$small + 1px})",
  "large" "(min-width: #{$medium + 1px})"
);

/*============================================================================
  #Modular scales (h/t Bourbon)
==============================================================================*/

$golden:           1.618;
$minor-second:     1.067;
$major-second:     1.125;
$minor-third:      1.2;
$major-third:      1.25;
$perfect-fourth:   1.333;
$augmented-fourth: 1.414;
$perfect-fifth:    1.5;
$minor-sixth:      1.6;
$major-sixth:      1.667;
$minor-seventh:    1.778;
$major-seventh:    1.875;
$octave:           2;
$major-tenth:      2.5;
$major-eleventh:   2.667;
$major-twelfth:    3;
$double-octave:    4;

@function modular-scale($increment, $ratio: $minor-third, $value: 16px) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}

/*============================================================================
  #Modular scale functions for type and layout
==============================================================================*/

$box-scale: $perfect-fourth;
$text-scale: $minor-second;

@function box-scale($increment) {
  @return modular-scale($increment, $box-scale);
}

@function text-scale($increment) {
  @return modular-scale($increment, $text-scale);
}

/*============================================================================
  #Mixins
==============================================================================*/

@mixin media-query($media-query) {
  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $expression: nth($breakpoint, 2);

    @if $media-query == $name and $expression {
      @media only screen and #{$expression} {
        @content;
      }
    }
  }
}

@mixin vendor-prefix($property, $value) {
  -webkit-#{$property}: $value;
  -ms-#{$property}: $value;
  -moz-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }
  @keyframes $animation-name {
    @content;
  }
}

@mixin clearfix() {
  &:after {
    content: " ";
    display: block;
    clear: both;
  }
}

@mixin text-links() {
  a {
    position: relative;

    &:after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      display: block;
      right: 0;
      height: 2px;
      background: $color-accent;
    }
  }
}

/*============================================================================
  #Reset
==============================================================================*/

@mixin reset() {
  //
  // Layout
  //

  *, :before, :after {
    @include vendor-prefix(box-sizing, border-box);
  }

  body, h1, h2, h3, h4, h5, h6, p, blockquote, figure, ol, ul {
    margin: 0;
    padding: 0;
  }

  img {
    height: auto;
    border: 0;
  }

  li {
    display: block;
  }

  //
  // Type
  //

  html {
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    // Optimize legibility on headers only to
    // prevent performance issues from applying
    // it to large portions of text.
    text-rendering: optimizeLegibility;
    font-weight: normal;
  }

  a {
    background-color: transparent;
    text-decoration: none;
    color: inherit;

    &:active,
    &:hover {
      outline: 0;
    }
  }

  strong {
    font-weight: bold;
  }
  em {
    font-style: italic;
  }

  sup {
    position: relative;
    top: -(box-scale(-6));
    vertical-align: top;
    font-size: text-scale(-2);
  }

  //
  // Forms
  //

  input,
  textarea,
  select {
    display: block;
    width: 100%;

    &[disabled] {
      cursor: default;
    }
  }

  label {
    display: inline-block;
  }

  label > * {
    pointer-events: none;
  }

  input::-moz-focus-inner {
    border: 0;
    padding: 0;
  }

  input[type=radio] {
    @include vendor-prefix(appearance, radio);
  }

  input[type=checkbox] {
    @include vendor-prefix(appearance, checkbox);
  }

  input[type="checkbox"], input[type="radio"] {
    display: inline;
    margin-bottom: 0;

    // prevent padding set on the input element
    // from applying to radio buttons or checkboxes
    // on iOS Safari
    padding: 0 !important;
  }

  input[type="search"] {
    @include vendor-prefix(appearance, textfield);

    &::-webkit-search-decoration {
      -webkit-appearance: none;
    }
  }

  input[type="submit"], button {
    cursor: pointer;
  }

  input[type="image"] {
    border: none;
  }
}

@include reset();

/*============================================================================
  #Layout
==============================================================================*/

@mixin layout() {
  .clearfix {
    &:after {
      content: " ";
      display: block;
      clear: both;
    }
  }

  .box-center {
    margin-right: auto;
    margin-left: auto;
  }

  .block {
    display: block;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-block-middle {
    display: inline-block;
    vertical-align: middle;
  }

  .invisible {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }

  .overflow-hidden {
    overflow: hidden;
  }

  .nowrap {
    white-space: nowrap;
  }

  .scroll-horizontal {
    overflow-y: hidden;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .image-container {
    display: block;
    font-size: 0;
    line-height: 1;

    img {
      width: 100%;
    }
  }
  .video-container {
    position: relative;

    iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }

  @each $value in baseline, middle, top, bottom {
    .align-#{$value} {
      vertical-align: $value;
    }
  }

  .full-height {
    height: 100%;
  }
  @include media-query(large) {
    .large--full-height {
      height: 100%;
    }
  }
}

@include layout();

/*============================================================================
  #Typography
==============================================================================*/

@mixin typography() {
  html, body {
    background-color: #FFFFFF;
  }

  html {
    font-size: 16px;
  }

  body, input, textarea, select, button {
    font-family: $font-stack;
    font-size: $font-size;
    color: $color-default;
  }

  h1, h2, h3, h4, h5, h6, p, ul, ol, blockquote, hr, input, textarea, select, button {
    margin-bottom: text-scale(0);
  }

  p, ul, ol, blockquote, label {
    line-height: text-scale(3);
  }

  a {
    @include vendor-prefix(transition, .2s);
  }

  hr {
    margin-top: 0;
  }

  small {
    font-size: text-scale(-1);
  }

  .cursor-pointer {
    cursor: pointer;
  }
  .cursor-default {
    cursor: default;
  }

  .text-hidden {
    visibility: hidden;
  }
  .text-justify {
    text-align: justify;
  }
  .text-caps {
    text-transform: uppercase;
  }
  .text-regular-case {
    text-transform: none;
  }
  .text-underline {
    text-decoration: underline;
  }
  .text-links {
    @include text-links();
  }
  .text-line-through {
    text-decoration: line-through;
  }

  .font-regular {
    font-weight: 400;
  }
  .font-bold {
    font-weight: 700;
  }
  .font-italic {
    font-style: italic;
  }
  .font-headline {
    font-family: $font-stack-headline;
  }
}

@include typography();


/*============================================================================
  #Forms
==============================================================================*/

@mixin forms() {
  .input {
    @include vendor-prefix(appearance, none);
    padding: box-scale(-3) box-scale(-1);
    border: 1px solid $color-default;
  }
}

@include forms();

/*============================================================================
  #Buttons
==============================================================================*/

@mixin buttons() {
  .button-reset {
    border: none;
    background: none;
    margin-bottom: 0;
    color: inherit;
    padding: 0;
  }

  @each $color in $colors {
    $color-key: nth($color, 1);
    $color-hex: nth($color, 2);

    .button-#{$color-key} {
      border: none;
      padding: box-scale(-1) box-scale(3);
      display: inline-block;
      color: #ffffff;
      background-color: $color-hex;
    }
  }
}

@include buttons();

/*============================================================================
  #RTE
==============================================================================*/

@mixin rte() {
  .rte-home {
    h1 {
      font-size: text-scale(11);
      line-height: text-scale(17);
      font-weight: bold;
      margin-bottom: box-scale(-2);
      font-family: $font-stack-headline;
    }

    h2 {
      font-size: text-scale(4);
      line-height: text-scale(10);
      margin-bottom: box-scale(3);
      font-family: $font-stack-headline;

      &:after {
        content: "";
        display: block;
        width: 100px;
        height: 10px;
        background: $color-accent;
        margin: box-scale(3) 0;
      }
    }

    p {
      font-size: text-scale(0);
      line-height: text-scale(6);
      margin-bottom: box-scale(1);
      @include text-links();
    }
  }

  .rte-article {
    @include text-links();

    p, ul, ol, blockquote, label {
      font-size: text-scale(0);
      line-height: text-scale(6);
    }

    h1, h2, h3, h4, h5, h6,
    p,
    ul, ol,
    blockquote,
    pre {
      margin-bottom: box-scale(2);
    }

    h1, h2, h3, h4, h5, h6 {
      font-size: text-scale(4);
      line-height: text-scale(10);
      font-family: $font-stack-headline;
    }

    code {
      font-family: Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace;
    }

    pre,
    pre code {
      color: #f8f8f2;
      background: 0 0;
      text-shadow: 0 1px rgba(0,0,0,.3);
      font-family: Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace;
      text-align: left;
      white-space: pre;
      word-spacing: normal;
      word-break: normal;
      word-wrap: normal;
      line-height: 1.5;
      -moz-tab-size: 4;
      -o-tab-size: 4;
      tab-size: 4;
      -webkit-hyphens: none;
      -moz-hyphens: none;
      -ms-hyphens: none;
      hyphens: none;
    }

    pre {
      margin-top: 0;
      border-radius: 0;
      padding: 1em;
      overflow: auto;
      background: #272822;
      border-left: 5px solid $color-accent;
      font-size: text-scale(-2);
      line-height: text-scale(4);

      @include media-query(large) {
        margin-left: -(box-scale(7));
        margin-right: -(box-scale(7));
      }
    }

    img {
      display: block;
      width: 100%;

      @include media-query(large) {
        width: calc(100% + #{(box-scale(7)) * 2});
        margin-left: -(box-scale(7));
      }
    }

    li {
      + li {
        margin-top: box-scale(-2);
      }
    }
  }
}

@include rte();

/*============================================================================
  #Grid
==============================================================================*/

@mixin grid() {
  @include clearfix();
  list-style: none;

  > .grid-item {
    float: left;
    vertical-align: top;
  }
}

@mixin grid-bar() {
  @include clearfix();
  list-style: none;
  font-size: 0;

  > .grid-item {
    display: inline-block;
    vertical-align: middle;
    white-space: normal;
    font-size: $font-size;
  }
}

@mixin grid-uniform() {
  @include clearfix();
  list-style: none;
  font-size: 0;

  > .grid-item {
    display: inline-block;
    vertical-align: top;
    white-space: normal;
    font-size: $font-size;
  }
}

@mixin grid-gutter($n) {
  $value: box-scale($n);

  margin-left: -($value);

  > .grid-item {
    padding-left: $value;
  }
}

@mixin grid-helpers($breakpoint: "") {

  .grid-item img {
    max-width: 100%;
  }

  .#{$breakpoint}grid {
    @include grid();
  }

  .#{$breakpoint}grid-reverse {
    @include vendor-prefix(transform, rotate(180deg));
    direction: rtl;

    > .grid-item {
      @include vendor-prefix(transform, rotate(-180deg));
      direction: ltr;
    }
  }

  .#{$breakpoint}grid-bar {
    @include grid-bar();
  }

  .#{$breakpoint}grid-bar-reverse {
    direction: rtl;

    > .grid-item {
      direction: ltr;
    }
  }

  .#{$breakpoint}grid-uniform {
    @include grid-uniform();
  }

  .#{$breakpoint}grid--0 {
    @include grid();
    @include grid-gutter(0);
  }
  .#{$breakpoint}grid-bar--0 {
    @include grid-bar();
    @include grid-gutter(0);
  }
  .#{$breakpoint}grid-uniform--0 {
    @include grid-uniform();
    @include grid-gutter(0);
  }

  @for $n from 1 through 8 {
    .#{$breakpoint}grid--up-#{$n} {
      @include grid();
      @include grid-gutter($n);
    }
    .#{$breakpoint}grid-bar--up-#{$n} {
      @include grid-bar();
      @include grid-gutter($n);
    }
    .#{$breakpoint}grid-uniform--up-#{$n} {
      @include grid-uniform();
      @include grid-gutter($n);
    }

    .#{$breakpoint}grid--down-#{$n} {
      @include grid();
      @include grid-gutter(-$n);
    }
    .#{$breakpoint}grid-bar--down-#{$n} {
      @include grid-bar();
      @include grid-gutter(-$n);
    }
    .#{$breakpoint}grid-uniform--down-#{$n} {
      @include grid-uniform();
      @include grid-gutter(-$n);
    }
  }
}

@mixin grid-column-helpers($breakpoint: "") {
  $columns: (1,one) (2,two) (3,three) (4,four) (5,five) (6,six) (7,seven) (8,eight) (9,nine) (10,ten) (11,eleven) (12,twelve) (13,thirteen) (14,fourteen) (15,fifteen) (16,sixteen);

  .one-max {
    max-width: 100%;
  }

  .#{$breakpoint}auto {
    width: auto;
  }

  .#{$breakpoint}one {
    width: 100%;
  }

  @each $column in $columns {
    $column-count: nth($column, 1);
    $column-class: nth($column, 2);

    @each $num in $columns {
      $num-value: nth($num, 1);
      $num-class: nth($num, 2);

      @if $column-count > $num-value {
        .#{$breakpoint}#{$num-class}-#{$column-class} {
          width: 100/$column-count * $num-value * 1%;
        }
      }
    }
  }
}

@include grid-helpers();
@include grid-column-helpers();

/*============================================================================
  #Flexbox
==============================================================================*/

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($grow: 1, $shrink: null, $basis: null) {
  $fg-boxflex: $grow;

  @if type-of($grow) == 'list' {
    $fg-boxflex: nth($grow, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $grow $shrink $basis;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $grow $shrink $basis;
  -ms-flex: $grow $shrink $basis;
  flex: $grow $shrink $basis;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin flex-gutter($num) {
  $value: box-scale($num);

  margin-left: -($value);

  > [class*=flex-item] {
    padding-left: $value;
  }
}

@mixin flexbox-helpers($breakpoint: "") {
  .#{$breakpoint}flex-item {
    @include flex(1);
  }
  .#{$breakpoint}flex-item-shrink {
    @include flex-shrink(1);
  }
  .#{$breakpoint}flex-item-center {
    @include align-self(center);
  }

  @for $num from 2 through 12 {
    .#{$breakpoint}flex-item--#{$num} {
      @include flex($num);
    }
  }

  .#{$breakpoint}flex {
    @include flexbox;
  }
  .#{$breakpoint}flex-bar {
    @include flexbox;
    @include align-items(center);
  }
  .#{$breakpoint}flex-center {
    @include flexbox;
    @include justify-content(center);
  }

  .#{$breakpoint}flex--0 {
    @include flexbox;
    @include flex-gutter(0);
  }
  .#{$breakpoint}flex-bar--0 {
    @include flexbox;
    @include align-items(center);
    @include flex-gutter(0);
  }
  .#{$breakpoint}flex-center--0 {
    @include flexbox;
    @include justify-content(center);
    @include flex-gutter(0);
  }

  @for $num from 1 through 8 {
    .#{$breakpoint}flex--up-#{$num} {
      @include flexbox;
      @include flex-gutter($num);
    }
    .#{$breakpoint}flex--down-#{$num} {
      @include flexbox;
      @include flex-gutter(-$num);
    }
    .#{$breakpoint}flex-bar--up-#{$num} {
      @include flexbox;
      @include align-items(center);
      @include flex-gutter($num);
    }
    .#{$breakpoint}flex-bar--down-#{$num} {
      @include flexbox;
      @include align-items(center);
      @include flex-gutter(-$num);
    }
    .#{$breakpoint}flex-center--up-#{$num} {
      @include flexbox;
      @include justify-content(center);
      @include flex-gutter($num);
    }
    .#{$breakpoint}flex-center--down-#{$num} {
      @include flexbox;
      @include justify-content(center);
      @include flex-gutter(-$num);
    }
  }
}

@include flexbox-helpers();

/*============================================================================
  #Modular scale helpers
==============================================================================*/

@mixin position-helpers($breakpoint: "") {
  .#{$breakpoint}position-absolute {
    position: absolute !important;
  }
  .#{$breakpoint}position-relative {
    position: relative !important;
  }

  .#{$breakpoint}position-center {
    position: absolute;
    top: 50%;
    left: 50%;
    @include vendor-prefix(transform, translate(-50%, -50%));
  }
  .#{$breakpoint}position-center-vertical {
    position: absolute;
    top: 50%;
    @include vendor-prefix(transform, translateY(-50%));
  }
  .#{$breakpoint}position-center-horizontal {
    position: absolute;
    left: 50%;
    @include vendor-prefix(transform, translateX(-50%));
  }
  .#{$breakpoint}position-full {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }

  @each $property in top, right, bottom, left {
    .#{$breakpoint}position-#{$property} {
      #{$property}: 0;
    }
    .#{$breakpoint}position-#{$property}--0 {
      #{$property}: box-scale(0);
    }
    @for $num from 1 through 12 {
      .#{$breakpoint}position-#{$property}--up-#{$num} {
        #{$property}: box-scale($num);
      }
      .#{$breakpoint}position-#{$property}--down-#{$num} {
        #{$property}: box-scale(-$num);
      }
      .#{$breakpoint}position-#{$property}-negative--up-#{$num} {
        #{$property}: -(box-scale($num));
      }
      .#{$breakpoint}position-#{$property}-negative--down-#{$num} {
        #{$property}: -(box-scale(-$num));
      }
    }
  }

  .#{$breakpoint}position-top-left {
    position: absolute;
    top: 0;
    left: 0;
  }
  .#{$breakpoint}position-top-right {
    position: absolute;
    top: 0;
    right: 0;
  }
  .#{$breakpoint}position-bottom-right {
    position: absolute;
    bottom: 0;
    right: 0;
  }
  .#{$breakpoint}position-bottom-left {
    position: absolute;
    bottom: 0;
    left: 0;
  }

  @for $num from 1 through 12 {
    .#{$breakpoint}position-top-left--up-#{$num} {
      top: box-scale($num);
      left: box-scale($num);
    }
    .#{$breakpoint}position-top-right--up-#{$num} {
      top: box-scale($num);
      right: box-scale($num);
    }
    .#{$breakpoint}position-bottom-right--up-#{$num} {
      bottom: box-scale($num);
      right: box-scale($num);
    }
    .#{$breakpoint}position-bottom-left--up-#{$num} {
      bottom: box-scale($num);
      left: box-scale($num);
    }
    .#{$breakpoint}position-left-center--up-#{$num} {
      left: box-scale($num);
      position: absolute;
      top: 50%;
      @include vendor-prefix(transform, translateY(-50%));
    }
    .#{$breakpoint}position-right-center--up-#{$num} {
      right: box-scale($num);
      position: absolute;
      top: 50%;
      @include vendor-prefix(transform, translateY(-50%));
    }
  }

  @for $n from 1 through 6 {
    .position-#{$n} {
      z-index: $n;
    }
    .position-relative-#{$n} {
      position: relative;
      z-index: $n;
    }
  }
}

@mixin padding-helpers($breakpoint: "") {
  .#{$breakpoint}padding--none {
    padding: 0;
  }
  .#{$breakpoint}padding--0 {
    padding: box-scale(0);
  }
  .#{$breakpoint}padding-top-bottom--0 {
    padding-top: box-scale(0);
    padding-bottom: box-scale(0);
  }
  .#{$breakpoint}padding-left-right--0 {
    padding-left: box-scale(0);
    padding-right: box-scale(0);
  }
  @for $num from 1 through 10 {
    .#{$breakpoint}padding--up-#{$num} {
      padding: box-scale($num);
    }
    .#{$breakpoint}padding--down-#{$num} {
      padding: box-scale(-$num);
    }
    .#{$breakpoint}padding-top-bottom--up-#{$num} {
      padding-top: box-scale($num);
      padding-bottom: box-scale($num);
    }
    .#{$breakpoint}padding-top-bottom--down-#{$num} {
      padding-top: box-scale(-$num);
      padding-bottom: box-scale(-$num);
    }
    .#{$breakpoint}padding-left-right--up-#{$num} {
      padding-left: box-scale($num);
      padding-right: box-scale($num);
    }
    .#{$breakpoint}padding-left-right--down-#{$num} {
      padding-left: box-scale(-$num);
      padding-right: box-scale(-$num);
    }
  }
  @each $side in top, right, bottom, left {
    .#{$breakpoint}padding-#{$side}--none {
      padding-#{$side}: 0;
    }
    .#{$breakpoint}padding-#{$side}--0 {
      padding-#{$side}: box-scale(0);
    }
    @for $num from 1 through 7 {
      .#{$breakpoint}padding-#{$side}--up-#{$num} {
        padding-#{$side}: box-scale($num);
      }
      .#{$breakpoint}padding-#{$side}--down-#{$num} {
        padding-#{$side}: box-scale(-$num);
      }
    }
  }
}

@mixin margin-helpers($breakpoint: "") {
  .#{$breakpoint}margin--none {
    margin: 0;
  }
  @each $side in top, right, bottom, left {
    .#{$breakpoint}margin-#{$side}--none {
      margin-#{$side}: 0;
    }
    .#{$breakpoint}margin-#{$side}--0 {
      margin-#{$side}: box-scale(0);
    }
    .#{$breakpoint}margin-#{$side}-negative--0 {
      margin-#{$side}: -(box-scale(0));
    }
    @for $num from 1 through 7 {
      .#{$breakpoint}margin-#{$side}--up-#{$num} {
        margin-#{$side}: box-scale($num);
      }
      .#{$breakpoint}margin-#{$side}--down-#{$num} {
        margin-#{$side}: box-scale(-$num);
      }
      .#{$breakpoint}margin-#{$side}-negative--up-#{$num} {
        margin-#{$side}: -(box-scale($num));
      }
      .#{$breakpoint}margin-#{$side}-negative--down-#{$num} {
        margin-#{$side}: -(box-scale(-$num));
      }
    }
  }
}

@mixin font-size-helpers($breakpoint: "") {
  .#{$breakpoint}font-size--none {
    font-size: 0;
    line-height: 1;
  }
  .#{$breakpoint}font-size--0 {
    font-size: text-scale(0);
  }
  @for $num from 1 through 15 {
    .#{$breakpoint}font-size--up-#{$num} {
      font-size: text-scale($num);
    }
    .#{$breakpoint}font-size--down-#{$num} {
      font-size: text-scale(-$num);
    }
  }
}

@mixin line-height-helpers($breakpoint: "") {
  .line-height--none {
    line-height: 1;
  }
  .line-height--0 {
    line-height: text-scale(0);
  }
  @for $num from 1 through 20 {
    .#{$breakpoint}line-height--up-#{$num} {
      line-height: text-scale($num);
    }
    .#{$breakpoint}line-height--down-#{$num} {
      line-height: text-scale(-$num);
    }
  }
}

@mixin box-ratio-helpers($breakpoint: "") {
  $ratios: (1,1) (3,1) (3,2) (4,3) (16,9) (21,9) (1080,1349);

  @each $ratio in $ratios {

    $width: nth($ratio,1);
    $height: nth($ratio,2);

    .#{$breakpoint}box-ratio--#{$width}-#{$height} {
      overflow: hidden;
      height: 0;
      width: 100%;
      padding-bottom: percentage($height/$width);
    }
  }

  .#{$breakpoint}box-ratio-inline {
    overflow: hidden;
    height: 0;
    width: 100%;
  }
}

@mixin color-helpers($breakpoint: "") {
  @each $color in $colors {
    $color-keyword: nth($color,1);
    $color-hex: nth($color,2);

    .#{$breakpoint}text-#{$color-keyword},
    .hover-text-#{$color-keyword}:hover {
      color: $color-hex;
    }
    .#{$breakpoint}box-#{$color-keyword},
    .hover-box-#{$color-keyword}:hover {
      background-color: $color-hex;
    }
    .fill-#{$color-keyword},
    .hover-fill-#{$color-keyword}:hover {
      fill: $color-hex;
    }
  }
}

@mixin visibility-helpers($breakpoint: "") {
  .#{$breakpoint}show {
    display: block;
  }
  .#{$breakpoint}show-inline {
    display: inline-block;
  }
  .#{$breakpoint}hide {
    display: none;
  }
  .#{$breakpoint}show\! {
    display: block !important;
  }
  .#{$breakpoint}show-inline\! {
    display: inline-block !important;
  }
  .#{$breakpoint}hide\! {
    display: none !important;
  }
}

@mixin text-align-helpers($breakpoint: "") {
  .#{$breakpoint}text-left {
    text-align: left;
  }
  .#{$breakpoint}text-right {
    text-align: right;
  }
  .#{$breakpoint}text-center {
    text-align: center;
  }
  .#{$breakpoint}text-left\! {
    text-align: left !important;
  }
  .#{$breakpoint}text-right\! {
    text-align: right !important;
  }
  .#{$breakpoint}text-center\! {
    text-align: center !important;
  }
}

@mixin float-helpers($breakpoint: "") {
  .#{$breakpoint}float-left {
    float: left !important;
  }
  .#{$breakpoint}float-right {
    float: right !important;
  }
}

@mixin border-helpers($breakpoint: "") {
  .border--none {
    border: none;
  }

  @each $color in $colors {
    $color-keyword: nth($color, 1);
    $color-hex: nth($color, 2);

    .border-#{$color-keyword}, .hover-border-#{$color-keyword}:hover {
      border: 1px solid $color-hex;
    }

    @each $side in top, right, bottom, left {
      .#{$breakpoint}border-#{$side}-#{$color-keyword} {
        border-#{$side}: 1px solid $color-hex;
      }
      .#{$breakpoint}border-#{$side}--none {
        border-#{$side}: none;
      }
    }

    .#{$breakpoint}border-top-bottom-#{$color-keyword} {
      border-top: 1px solid $color-hex;
      border-bottom: 1px solid $color-hex;
    }
    .#{$breakpoint}border-right-left-#{$color-keyword} {
      border-right: 1px solid $color-hex;
      border-left: 1px solid $color-hex;
    }

    .#{$breakpoint}border-bottom-#{$color-keyword}--0 {
      padding-bottom: box-scale(0);
      margin-bottom: box-scale(0);
      border-bottom: 1px solid $color-hex;
    }

    @for $num from 1 through 4 {
      .#{$breakpoint}border-bottom-#{$color-keyword}--up-#{$num} {
        padding-bottom: box-scale($num);
        margin-bottom: box-scale($num);
        border-bottom: 1px solid $color-hex;
      }
    }

    @for $num from 1 through 4 {
      .#{$breakpoint}border-bottom-#{$color-keyword}--down-#{$num} {
        padding-bottom: box-scale(-$num);
        margin-bottom: box-scale(-$num);
        border-bottom: 1px solid $color-hex;
      }
    }
  }
}

@include position-helpers();
@include padding-helpers();
@include margin-helpers();
@include font-size-helpers();
@include line-height-helpers();
@include box-ratio-helpers();
@include color-helpers();
@include visibility-helpers();
@include text-align-helpers();
@include float-helpers();
@include border-helpers();

@each $breakpoint in $breakpoints {
  $keyword: nth($breakpoint, 1);
  $media-query: nth($breakpoint, 2);

  @media only screen and #{$media-query} {
    @include grid-helpers("#{$keyword}--");
    @include grid-column-helpers("#{$keyword}--");
    @include flexbox-helpers("#{$keyword}--");
    @include position-helpers("#{$keyword}--");
    @include padding-helpers("#{$keyword}--");
    @include margin-helpers("#{$keyword}--");
    @include font-size-helpers("#{$keyword}--");
    @include line-height-helpers("#{$keyword}--");
    @include box-ratio-helpers("#{$keyword}--");
    @include color-helpers("#{$keyword}--");
    @include visibility-helpers("#{$keyword}--");
    @include text-align-helpers("#{$keyword}--");
    @include float-helpers("#{$keyword}--");
    @include border-helpers("#{$keyword}--");
  }
}

@mixin container() {
  .container {
    @include vendor-prefix(box-sizing, content-box);
    padding-left: box-scale(0);
    padding-right: box-scale(0);
    max-width: 1024px;
    margin-left: auto;
    margin-right: auto;
  }

  .container-small {
    @include vendor-prefix(box-sizing, content-box);
    padding-left: box-scale(0);
    padding-right: box-scale(0);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }
}

@mixin nav() {
  .nav {
    @include text-links();
    @include flexbox();
    @include justify-content(flex-end);

    li {
      + li {
        margin-left: box-scale(-2);

        &:before {
          content: "•";
          margin-right: box-scale(-2);
        }
      }
    }
  }
}

@mixin blog-articles() {
  .blog-articles {
    li {
      &:not(:last-child) {
        margin-bottom: box-scale(3);

        &:after {
          content: "";
          display: block;
          background: $color-accent;
          width: 100px;
          height: 5px;
          margin-top: box-scale(3);
        }
      }
    }
  }
}

@include container();
@include nav();
@include blog-articles();
